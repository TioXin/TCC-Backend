README.md: Documentação da Integração DJANGO + FIREBASE
Este documento detalha o setup do Backend Django, sua integração com o Firebase Authentication
e as principais configurações de segurança (CORS e DRF).

1. Estrutura do Projeto
O projeto adota uma estrutura de Frontend (React) e Backend (Django) separados, comunicando-se via API REST.

TCC/
├── VanguardTech-TCC/    # FRONTEND (React/Vite)
└── backend/             # BACKEND (Django/DRF)
    ├── venv/            # Ambiente Virtual Python
    ├── backend_project/ # Configurações Globais
    ├── api/             # Aplicativo Principal da API
    └── manage.py
2. Configuração do Ambiente e Instalação
Para configurar o ambiente, execute os seguintes comandos no terminal na pasta TCC/:

Bash

# Entra na pasta do Backend
cd backend

# 1. Ativa o ambiente virtual (Windows PowerShell)
.\venv\Scripts\Activate.ps1

# 2. Instala as dependências essenciais
pip install django djangorestframework django-cors-headers firebase-admin

# 3. Cria a lista de dependências
pip freeze > requirements.txt
3. Configurações Chave no settings.py
O arquivo TCC/backend/backend_project/settings.py é o coração da integração.

3.1. Instalação e CORS
Garante que o Django se comporte como uma API e aceite requisições do frontend React (porta 3000).

Python

# settings.py

INSTALLED_APPS = [
    # ...
    'rest_framework',   # Habilita a API REST
    'corsheaders',      # Gerencia as permissões de domínio
    'api',              # Seu aplicativo
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # DEVE vir antes do CommonMiddleware!
    'corsheaders.middleware.CorsMiddleware', 
    # ...
]

# Domínios permitidos (React/Frontend)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    # Adicione aqui o domínio de produção (Firebase Hosting)
]
CORS_ALLOW_CREDENTIALS = True 
3.2. Inicialização do Firebase Admin SDK
Conecta o Django ao seu projeto Firebase via a chave privada (serviceAccountKey.json).

Atenção: O arquivo serviceAccountKey.json deve estar na pasta TCC/backend/ (ao lado do manage.py).

Python

# settings.py

import firebase_admin
from firebase_admin import credentials
import os
from pathlib import Path

# ... (Configuração do BASE_DIR)

# Caminho para a chave privada
FIREBASE_SERVICE_ACCOUNT_PATH = os.path.join(BASE_DIR, 'serviceAccountKey.json')

if not firebase_admin._apps:
    try:
        cred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_PATH)
        firebase_admin.initialize_app(cred)
        # print("Firebase Admin SDK inicializado com sucesso!")
    except FileNotFoundError:
        # print("ERRO: Chave do Firebase não encontrada...")
        pass 
3.3. Configuração do Django REST Framework (DRF)
Instrui o DRF a usar a nossa classe customizada de autenticação.

Python

# settings.py

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Aponta para a classe de validação do token no arquivo 'api/authentication.py'
        'api.authentication.FirebaseAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # Exige que todas as views de API sejam autenticadas
        'rest_framework.permissions.IsAuthenticated',
    )
}
4. Lógica de Autenticação (A Classe FirebaseAuthentication)
Este código reside em TCC/backend/api/authentication.py e é responsável por validar o token JWT enviado pelo React.

Função Principal	Implementação em Python	Detalhes
Extração	auth_header = request.META.get('HTTP_AUTHORIZATION')	Obtém o cabeçalho Authorization: Bearer <token>.
Validação Firebase	decoded_token = auth.verify_id_token(token)	Essencial: Usa o Firebase Admin SDK para verificar se o token é válido, não está expirado e pertence ao seu projeto.
Mapeamento Usuário	user = User.objects.get(username=firebase_uid)	Busca ou cria um objeto User no banco de dados local do Django, usando o uid do Firebase como username. Isso é necessário para que o DRF trate o usuário como logado.

Exportar para as Planilhas
Próximos Passos Essenciais
Chave de Serviço: Garanta que a chave serviceAccountKey.json esteja na pasta backend/.

Migrations: Rode as migrações iniciais do Django para criar o banco de dados e as tabelas de usuário:

Bash

cd backend
python manage.py makemigrations
python manage.py migrate
URLs: Crie o arquivo api/urls.py e configure o backend_project/urls.py para apontar para ele, definindo os endpoints da sua API.